// hook for generating a sitemap based on the routes with a +page.svelte
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const basePath = 'https://porg.dev';
const routesDir = path.join(__dirname, '../src/routes');
const sitemapPath = path.join(__dirname, '../src/routes/sitemap.xml/+server.ts');

// hardcoded extra URLs if this script has blind spots
const extraUrls = [
  //`${basePath}/extra-page-1`,
  //`${basePath}/extra-page-2`,
  // Add more as needed
];

function listSveltePages(dir, prefix = '') {
  const dirs = fs.readdirSync(dir, { withFileTypes: true });
  const pages = [];

  dirs.forEach(dirent => {
    if (dirent.isDirectory()) {
      if (dirent.name.includes('[')) {
        pages.push(`${prefix}/`);
      } else {
        pages.push(...listSveltePages(path.join(dir, dirent.name), `${prefix}/${dirent.name}`));
      }
    } else if (dirent.isFile() && dirent.name.endsWith('+page.svelte')) {
      pages.push(`${prefix}/`);
    }
  });

  return [...new Set(pages)];
}

function generateSitemap(urls) {
  const urlset = urls.map(url => `<url><loc>${url}</loc></url>`).join('\n');

  return `
    <?xml version="1.0" encoding="UTF-8" ?>
    <urlset xmlns="https://www.sitemaps.org/schemas/sitemap/0.9">
    ${urlset}
    </urlset>
  `.trim();
}

async function updateSitemap() {
  const pages = listSveltePages(routesDir);
  const dynamicUrls = pages.map(page => `${basePath}${page === '/' ? '' : page}`);
  const urls = [...new Set([...dynamicUrls, ...extraUrls])]; // Combine and remove duplicates
  const sitemap = generateSitemap(urls);

  fs.writeFileSync(sitemapPath, `
  // Path: src/routes/sitemap.xml/+server.ts
  // This file was generated by the generate-sitemap.js hook
export async function GET() {
  return new Response(\`${sitemap}\`, {
    headers: {
      'Content-Type': 'application/xml',
    },
  });
}`);
  console.log('Sitemap updated.');
}

updateSitemap();
