/*  normalize the score to a 0-10 scale, where zero is any number where the scale is
     greater than maxScore, and everything else is linearly scaled to 10.
    ] */
    export function calculateBoundScore(score:number, maxScore:number) {
        if (score > maxScore) {
            return 0;
        } else {
            return Math.round(10 * (maxScore - score) / maxScore);
        }
    }

/* Return a string of moon emoji to represent a score. The range of the scale is 0-4*n_moons.
* e.g. for n_moons = 3:
*    0 ğŸŒ‘ğŸŒ‘
*    1 ğŸŒ˜ğŸŒ‘
*    2 ğŸŒ—ğŸŒ‘
*    3 ğŸŒ–ğŸŒ‘
*    4 ğŸŒ•ğŸŒ‘
*    5 ğŸŒ•ğŸŒ˜
*    6 ğŸŒ•ğŸŒ—
*    7 ğŸŒ•ğŸŒ–
*    8 ğŸŒ•ğŸŒ•
*/
export function moonScale(score:number, n_moons:number = 3): string {
    const max_score: number = n_moons * 4;
    const bound_score = Math.max(Math.min(score, max_score), 0);
    const moonPhases = ['ğŸŒ‘', 'ğŸŒ˜', 'ğŸŒ—', 'ğŸŒ–']

    const fullMoons:number = Math.floor(bound_score / moonPhases.length);

    let moonString = '';

    for (let i = 0; i < fullMoons; i++) {
        moonString += 'ğŸŒ•';
    }

    moonString += moonPhases[bound_score % moonPhases.length];
    
    for (let i = fullMoons + 1; i < n_moons; i++) {
        moonString += 'ğŸŒ‘';
    }
    return moonString;
}